var fs = require('fs')
var path = require('path')
var tmpdir = require('os').tmpdir()

var pilot = path.join(__dirname, 'pilot.jpg')

var gim = require('../')

describe('Vendor', function () {
  var gm = gim.extend()
  gm.prototype.GraphicsMagick = true

  it('should work with ImageMagick', function (done) {
    gim().exec('identify', ['-version'], function (err, stdout) {
      if (err)
        throw err

      stdout.match('ImageMagick').should.be.ok
      done()
    })
  })

  it('should work with GraphicsMagick', function (done) {
    gim({
      GraphicsMagick: true
    }).exec('identify', ['-version'], function (err, stdout) {
      if (err)
        throw err

      stdout.match('GraphicsMagick').should.be.ok
      done()
    })
  })

  it('should work with GraphicsMagick by extending', function (done) {
    gm().exec('identify', ['-version'], function (err, stdout) {
      if (err)
        throw err

      stdout.match('GraphicsMagick').should.be.ok
      done()
    })
  })

  it('should work with ImageMagick when extending as GraphicsMagick', function (done) {
    gm({
      ImageMagick: true
    }).exec('identify', ['-version'], function (err, stdout) {
      if (err)
        throw err

      stdout.match('ImageMagick').should.be.ok
      done()
    })
  })
})

describe('stdin', function () {
  it('should work with a filename', function (done) {
    gim(pilot).identify(done)
  })

  it('should work with a buffer input', function (done) {
    gim(fs.readFileSync(pilot)).identify(done)
  })

  it('should work with writing a buffer', function (done) {
    gim().identify(done).end(fs.readFileSync(pilot))
  })

  it('should work with a stream input', function (done) {
    gim(fs.createReadStream(pilot)).identify(done)
  })

  it('should work with piping a stream input', function (done) {
    fs.createReadStream(pilot).pipe(gim().identify(done))
  })
})

describe('stdout', function (done) {
  it('should work with a filename', function (done) {
    var output = path.join(tmpdir, 'pilot.png')

    gim(pilot).writeFile(output, function (err) {
      if (err)
        throw err

      fs.stat(output, done)
    })
  })
})

describe('identify', function () {
  it('should identify an image file with verbosity', function (done) {
    gim(pilot).identify(done)
  })

  it('should identify an image file with a custom string', function (done) {
    gim(pilot).identify('%m', function (err, stdout) {
      if (err)
        throw err

      stdout.should.equal('JPEG')
      done()
    })
  })

  it('should identify an image stream with verbosity', function (done) {
    gim(fs.createReadStream(pilot)).identify(done)
  })

  it('should identify an image stream with a custom string', function (done) {
    gim(fs.createReadStream(pilot)).identify('%m', function (err, stdout) {
      if (err)
        throw err

      stdout.should.equal('JPEG')
      done()
    })
  })

  it('should identify an image buffer with verbosity', function (done) {
    gim(fs.readFileSync(pilot)).identify(done)
  })

  it('should identify an image buffer with a custom string', function (done) {
    gim(fs.readFileSync(pilot)).identify('%m', function (err, stdout) {
      if (err)
        throw err

      stdout.should.equal('JPEG')
      done()
    })
  })
})